using System;  // Подключение пространства имен System для основных классов
using System.IO;  // Подключение пространства имен System.IO для работы с файлами
using System.Reflection;  // Подключение пространства имен System.Reflection для работы с метаданными
using System.Text;  // Подключение пространства имен System.Text для работы со строками

namespace OOP_lab11  // Определение пространства имен OOP_lab11
{
    class Program  // Определение класса Program
{
    #region airline  // Регион кода с названием "airline"
    // Определение интерфейса с именем "pampam".
    public interface pampam { }

    // Объявление частичного класса с именем "Airline" внутри пространства имен.
    public partial class Airline : pampam
    {
        // Определение метода с именем "Sum", принимающего два целых числа и возвращающего их сумму.
        public int Sum(int a, int b) { return a + b; }

        // Объявление статического поля для хранения количества созданных объектов.
        public static int NumOfFlights = 0;

        // Объявление поля только для чтения для идентификатора объекта.
        public readonly int id;

        // Объявление закрытых полей для различных свойств авиалинии.
        private string Country;
        private int Flight_Number;
        private string Airplane_type;
        private DateTime Departure;
        private string Day;

        // Определение открытого свойства "Destination" с закрытым сеттером.
        public string Destination
        {
            get { return this.Country; }
            private set { this.Country = value; }
        }

        // Определение свойства только для чтения для номера рейса.
        public int Flight
        {
            get { return this.Flight_Number; }
        }

        // Определение свойства для типа самолета с геттером и сеттером.
        public string Airplane
        {
            get { return this.Airplane_type; }
            set { this.Airplane_type = value; }
        }

        // Определение свойства для времени вылета с закрытым сеттером.
        public DateTime Flight_Time
        {
            get { return this.Departure; }
            private set { this.Departure = value; }
        }

        // Определение свойства для дня недели с сеттером.
        public string Day_of_week
        {
            get { return this.Day; }
            set { this.Day = value; }
        }
    }

    // Продолжение объявления частичного класса "Airline".
    public partial class Airline
    {
        // Определение конструктора без параметров с установкой значений по умолчанию.
        public Airline()
        {
            this.id = Airline.NumOfFlights++;
            this.Country = "";
            this.Flight_Number = 0;
            this.Airplane_type = "";
            this.Departure = DateTime.MinValue;
            this.Day = "";
        }

        // Определение конструктора с параметрами для базового класса.
        public Airline(string Country, int Flight_Number, string Airplane_Type, DateTime Departure, string Day)
        {
            this.id = Airline.NumOfFlights++;
            this.Country = Country;
            this.Departure = Departure;
            this.Airplane_type = Airplane_Type;
            this.Day = Day;
            this.Flight_Number = Flight_Number;
        }

        // Определение статического конструктора с выводом сообщения в консоль.
        static Airline() { Console.WriteLine("Вызвался статический конструктор\n"); }

        // Определение деструктора, уменьшающего количество рейсов.
        ~Airline()
        {
            Airline.NumOfFlights--;
        }

        // Переопределение метода Equals для сравнения объектов Airline.
        public override bool Equals(object obj)
        {
            Airline temp = obj as Airline;
            if (temp == null)
                return false;
            return (temp.Departure == this.Departure && temp.Day == this.Day && temp.Country == this.Country && temp.Flight_Number == this.Flight_Number && temp.Airplane_type == this.Airplane_type);
        }

        // Переопределение метода GetHashCode с выводом сообщения в консоль.
        public override int GetHashCode()
        {
            Console.WriteLine("Вызвался переопределенный метод GetHashCode");
            return base.GetHashCode();
        }

        // Переопределение метода ToString для предоставления строкового представления объекта.
        public override string ToString()
        {
            return ($"Пункт назначения: {this.Country}, День недели: {this.Day}, Номер рейса: {this.Flight_Number}, Тип самолёта: {this.Airplane_type}");
        }

        // Определение статического метода для сортировки рейсов по указанному дню.
        public static void sort_by_day(Airline[] arr, string dep_day)
        {
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i].Day_of_week.Equals(dep_day))
                {
                    Console.WriteLine($"Пункт назначения: {arr[i].Destination}");
                    Console.WriteLine($"Номер рейса: {arr[i].Flight}");
                    Console.WriteLine($"Тип самолёта: {arr[i].Airplane}");
                    Console.WriteLine($"День недели: {arr[i].Day_of_week}");
                    Console.WriteLine($"Время отлёта: {(arr[i].Flight_Time).ToLongTimeString()}");
                }
            }
        }

        // Определение статического метода для сортировки рейсов по указанному пункту назначения.
        public static void sort_by_destination(Airline[] arr, ref string place)
        {
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr[i].Destination == place)
                {
                    Console.WriteLine($"Пункт назначения: {arr[i].Destination}");
                    Console.WriteLine($"Номер рейса: {arr[i].Flight}");
                    Console.WriteLine($"Тип самолёта: {arr[i].Airplane}");
                    Console.WriteLine($"День недели: {arr[i].Day_of_week}");
                    Console.WriteLine($"Время отлёта: {(arr[i].Flight_Time).ToLongTimeString()}");
                }
            }
        }
    }
    #endregion

    // Точка входа в приложение.
    static void Main(string[] args)
    {
        // Вывод полного имени сборки текущего приложения.
        Console.WriteLine("Полное имя сборки: " + AssemblyName.GetAssemblyName(@"E:\уник\c\OOP_lab11\bin\Debug\net7.0\OOP_lab11.dll") + "\n");

        // Вызов методов из класса Reflector для сбора и записи информации о классе Airline.
        Reflector.all_ClassComponents_toFile("OOP_lab11.Program+Airline");
        Console.WriteLine("Все компоненты класса 'OOP_lab11.Program+Airline' были записаны в файл.\n");

        Reflector.public_ClassComponents_toFile("OOP_lab11.Program+Airline");
        Console.WriteLine("Публичные компоненты класса 'OOP_lab11.Program+Airline' были записаны в файл.\n");

        Reflector.fieldsANDproperties_ClassComponents_toFile("OOP_lab11.Program+Airline");
        Console.WriteLine("Поля и свойства класса 'OOP_lab11.Program+Airline' были записаны в файл.\n");

        Reflector.interfaces_ClassComponents_toFile("OOP_lab11.Program+Airline");
        Console.WriteLine("Интерфейсы класса 'OOP_lab11.Program+Airline' были записаны в");
                    Console.WriteLine("Интерфейсы класса 'OOP_lab11.Program+Airline' были записаны в файл.\n");

            Reflector.methodsWITHparams_ClassComponents_toFile("OOP_lab11.Program+Airline", "String");
            Console.WriteLine("Методы, включающие параметр типа 'String' класса 'lab12.Program+Airline', были записаны в файл.\n");

            Reflector.lateBinding("OOP_lab11.Program+Airline");
        }

        // Объявление вложенного класса Reflector.
        public class Reflector
        {
            // Метод для записи информации о всех компонентах класса в файл.
            public static void all_ClassComponents_toFile(string className)
            {
                Type classType = Type.GetType(className, true, true);
                using (StreamWriter file = new StreamWriter(@"E:\уник\c\OOP_lab11\all_classComponents.txt"))
                {
                    file.WriteLine($">>>>>>>>>>>>Информация о классе  {className}");
                    file.WriteLine($"Количество свойств: {classType.GetProperties().Length}");
                    file.WriteLine($"Количество методов: {classType.GetMethods().Length}");
                    file.WriteLine($"Количество конструкторов: {classType.GetConstructors().Length}");
                    file.WriteLine($"Количество полей: {classType.GetFields().Length}");
                    file.WriteLine($">>>>>>>>>>>>");
                    foreach (MemberInfo item in classType.GetMembers())
                        file.WriteLine($"Тип: {item.MemberType}\t Имя: {item.Name}");
                }
            }

            // Метод для записи информации о публичных компонентах класса в файл.
            public static void public_ClassComponents_toFile(string className)
            {
                Type classType = Type.GetType(className, true, true);
                using (StreamWriter file = new StreamWriter(@"E:\уник\c\OOP_lab11\public_classComponents.txt"))
                {
                    file.WriteLine($">>>>>>>>>>>>Информация о классе {className}");
                    file.WriteLine($"Количество публичных свойств: {classType.GetProperties(BindingFlags.Public | BindingFlags.Instance).Length}");
                    file.WriteLine($"Количество публичных методов: {classType.GetMethods(BindingFlags.Public | BindingFlags.Instance).Length}");
                    file.WriteLine($"Количество публичных конструкторов: {classType.GetConstructors(BindingFlags.Public | BindingFlags.Instance).Length}");
                    file.WriteLine($"Количество публичных полей: {classType.GetFields(BindingFlags.Public | BindingFlags.Instance).Length}");
                    file.WriteLine($">>>>>>>>>>>>");
                    foreach (MemberInfo item in classType.GetMembers(BindingFlags.Public | BindingFlags.Instance))
                        file.WriteLine($"Тип: {item.MemberType}\t Имя: {item.Name}");
                }
            }

            // Метод для записи информации о полях и свойствах класса в файл.
            public static void fieldsANDproperties_ClassComponents_toFile(string className)
            {
                Type classType = Type.GetType(className, true, true);
                using (StreamWriter file = new StreamWriter(@"E:\уник\c\OOP_lab11\fieldsANDproperties_classComponents.txt"))
                {
                    file.WriteLine($">>>>>>>>>>>>Информация о классе {className}");
                    file.WriteLine($"Количество свойств: {classType.GetProperties().Length}");
                    file.WriteLine($"Количество полей: {classType.GetFields().Length}");
                    file.WriteLine($">>>>>>>>>>>>");
                    file.WriteLine("\nПоля:");
                    foreach (MemberInfo item in classType.GetFields())
                        file.WriteLine($"Тип: {item.MemberType}\t Имя: {item.Name}");

                    file.WriteLine("\nСвойства:");
                    foreach (MemberInfo item in classType.GetProperties())
                        file.WriteLine($"Тип: {item.MemberType}\t Имя: {item.Name}");
                }
            }

            // Метод для записи информации об интерфейсах класса в файл.
            public static void interfaces_ClassComponents_toFile(string className)
            {
                Type classType = Type.GetType(className, true, true);
                using (StreamWriter file = new StreamWriter(@"E:\уник\c\OOP_lab11\interfaces_classComponents.txt"))
                {
                    file.WriteLine($">>>>>>>>>>>>Информация о классе {className}");
                    file.WriteLine($"Количество интерфейсов: {classType.GetInterfaces().Length}");
                    file.WriteLine($">>>>>>>>>>>>");
                    foreach (MemberInfo item in classType.GetInterfaces())
                        file.WriteLine($"Тип: {item.MemberType}\t Имя: {item.Name}");
                }
            }

            // Метод для записи информации о методах с заданным параметром в файл.
            public static void methodsWITHparams_ClassComponents_toFile(string className, string paramType)
            {
                Type classType = Type.GetType(className, true, true);
                using (StreamWriter file = new StreamWriter(@"E:\уник\c\OOP_lab11\methodsWITHparams_classComponents.txt"))
                {
                    file.WriteLine($">>>>>>>>>>>>Информация о классе {className}");
                    int count = 0;
                    foreach (MethodInfo method in classType.GetMethods())
                        foreach (ParameterInfo p in method.GetParameters())
                            if (paramType.Equals(p.ParameterType.Name))
                                count++;

                    file.WriteLine($"Количество методов с параметром типа {paramType}: {count}");

                    if (count != 0)
                    {
                        file.WriteLine($">>>>>>>>>>>>");
                        foreach (MethodInfo method in classType.GetMethods())
                        {
                            string modificator = "";
                            if (method.IsPrivate)
                                modificator += "private ";
                            if (method.IsAbstract)
                                modificator += "abstract ";
                            if (method.IsPublic)
                                modificator += "public ";
                            if (method.IsStatic)
                                modificator += "static ";
                            if (method.IsVirtual)
                                modificator += "virtual ";

                            bool isConsiste = false;
                            foreach (ParameterInfo param in method.GetParameters())
                            {
                                if (paramType.Equals(param.ParameterType.Name))
                                {
                                    isConsiste = true;
                                    break;
                                }
                            }

                            if (isConsiste)
                            {
                                file.Write($"{modificator} {method.ReturnType.Name} {method.Name} (");

                                ParameterInfo[] parameters = method.GetParameters();
                                for (int i = 0; i < parameters.Length; i++)
                                {
                                    file.Write($"{parameters[i].ParameterType.Name} {parameters[i].Name}");
                                    if (i + 1 < parameters.Length) file.Write(", ");
                                }
                                file.WriteLine(")");
                                isConsiste = false;
                            }
                        }
                    }
                }
            }

            // Метод для выполнения позднего связывания (late binding).
            public static void lateBinding(string className, string methodName = "Sum")
            {
                Type classType = Type.GetType(className, false, true);
                object obj = Activator.CreateInstance(classType);
                MethodInfo methodInfo = classType.GetMethod(methodName);
                StreamReader streamReader = new StreamReader(@"E:\уник\c\OOP_lab11\paramsForSum.txt");

                object result = methodInfo.Invoke(obj, new object[] { Convert.ToInt32(streamReader.ReadLine()), Convert.ToInt32(streamReader.ReadLine()) });
                Console.WriteLine($"Результат invoked функции: {result}");
            }
        }
    }
}
