--Университет. модель с планом успеваемости для каждого студента на следующий год с учетом успеваемости за предыдущие годы (предложить варианты зависимостей).
SELECT * FROM 
(
SELECT
    p.IDSTUDENT, SUBSTR(s.STUDENT_NAME || ' ' || s.STUDENT_SURNAME || ' ' || s.STUDENT_PATRONYMIC, 1, 30) AS FULL_NAME, EXTRACT(YEAR FROM p.PDATE) AS PROGRESS_YEAR, AVG(p.ESTIMATION) AS AVG_ESTIMATION
FROM
    PROGRESS p
    JOIN STUDENT s ON p.IDSTUDENT = s.IDSTUDENT
GROUP BY
    p.IDSTUDENT, s.STUDENT_NAME, s.STUDENT_SURNAME, s.STUDENT_PATRONYMIC, EXTRACT(YEAR FROM p.PDATE)
)   
MODEL
    PARTITION BY (IDSTUDENT, FULL_NAME)
    DIMENSION BY (PROGRESS_YEAR)
    MEASURES (AVG_ESTIMATION AS CURRENT_YEAR_ESTIMATION, 0 AS NEXT_YEAR_ESTIMATION)
    RULES (
        NEXT_YEAR_ESTIMATION[ANY] = CASE
            WHEN CURRENT_YEAR_ESTIMATION[CV(PROGRESS_YEAR)] >= 8 THEN CURRENT_YEAR_ESTIMATION[CV(PROGRESS_YEAR)] * 1.05
            WHEN CURRENT_YEAR_ESTIMATION[CV(PROGRESS_YEAR)] BETWEEN 5 AND 8 THEN CURRENT_YEAR_ESTIMATION[CV(PROGRESS_YEAR)] * 1.02
            ELSE CURRENT_YEAR_ESTIMATION[CV(PROGRESS_YEAR)] * 0.95
    END
); 
    
--
SELECT s.IDSTUDENT,s.STUDENT_SURNAME,p.SUBJECT,p.ESTIMATION,p.PDATE
FROM STUDENT s 
JOIN PROGRESS p ON s.IDSTUDENT = p.IDSTUDENT
ORDER BY s.IDSTUDENT, p.PDATE;    
    
--Университет. Падение, рост, падение успеваемости для каждой группы     
SELECT *
FROM (
    SELECT
        s.IDGROUP,
        p.IDSTUDENT,
        TRUNC(p.PDATE, 'MM') AS PROGRESS_PERIOD,
        AVG(p.ESTIMATION) AS AVG_ESTIMATION
    FROM
        PROGRESS p
        JOIN STUDENT s ON p.IDSTUDENT = s.IDSTUDENT
    GROUP BY
        s.IDGROUP,
        p.IDSTUDENT,
        TRUNC(p.PDATE, 'MM')
)
MATCH_RECOGNIZE (
    PARTITION BY IDGROUP, IDSTUDENT
    ORDER BY PROGRESS_PERIOD
    MEASURES
        FIRST(A.PROGRESS_PERIOD) AS FIRST_PERIOD,
        FIRST(A.AVG_ESTIMATION) AS FIRST_ESTIMATION,
        FIRST(B.PROGRESS_PERIOD) AS SECOND_PERIOD,
        FIRST(B.AVG_ESTIMATION) AS SECOND_ESTIMATION,
        FIRST(C.PROGRESS_PERIOD) AS THIRD_PERIOD,
        FIRST(C.AVG_ESTIMATION) AS THIRD_ESTIMATION
    PATTERN (A B C)
    DEFINE
        A AS A.AVG_ESTIMATION < PREV(A.AVG_ESTIMATION), -- Падение на первом шаге
        B AS B.AVG_ESTIMATION > PREV(B.AVG_ESTIMATION), -- Рост на втором шаге
        C AS C.AVG_ESTIMATION < PREV(C.AVG_ESTIMATION)  -- Падение на третьем шаге
);


DELETE FROM PROGRESS WHERE IDSTUDENT = 30;

SELECT * FROM GROUPS;
SELECT * FROM STUDENT;
SELECT * FROM PROGRESS;

-- Вставка студентов
INSERT INTO STUDENT (IDGROUP, STUDENT_NAME, STUDENT_SURNAME, STUDENT_PATRONYMIC, BDAY)
VALUES (15, 'Александр', 'Грибоедов', 'Александрович', TO_DATE('2000-12-05', 'YYYY-MM-DD'));

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-01-15', 'YYYY-MM-DD'), 5); -- Падение

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-03-15', 'YYYY-MM-DD'), 6); -- Рост

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-05-15', 'YYYY-MM-DD'), 4); -- Падение

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-02-20', 'YYYY-MM-DD'), 5); -- Падение

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-04-20', 'YYYY-MM-DD'), 6); -- Рост

INSERT INTO PROGRESS (SUBJECT, IDSTUDENT, PDATE, ESTIMATION)
VALUES ('S01', 42, TO_DATE('2023-06-20', 'YYYY-MM-DD'), 5); -- Падение

